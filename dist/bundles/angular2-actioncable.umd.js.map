{"version":3,"file":"angular2-actioncable.umd.js","sources":["ng://angular2-actioncable/src/cable.ts","ng://angular2-actioncable/src/action-cable.service.ts"],"sourcesContent":["import * as ActionCableNs from '@rails/actioncable';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst ActionCable = ActionCableNs;\n\nexport class Cable {\n  baseCable: any;\n  private disconnectedSource: Subject<any> = new Subject();\n\n  constructor(public url: string, public params?: any) {\n    this.baseCable = ActionCable.createConsumer(this.buildUrl(url, params));\n\n    // If a function is passed as params, re-evaluate it before attempting to reconnect\n    if (params instanceof Function) {\n      this.disconnected().subscribe(() => {\n        this.baseCable.url = ActionCable.createWebSocketURL(this.buildUrl(url, params));\n      });\n    }\n  }\n\n  /**\n   * Create a new subscription to a channel, optionally with topic parameters.\n   */\n  channel(name: string, params = {}): Channel {\n    const channel = new Channel(this, name, params);\n    channel.disconnected().subscribe(data => this.disconnectedSource.next(data));\n    return channel;\n  }\n\n  /**\n   * Emits when the WebSocket connection is closed.\n   */\n  disconnected(): Observable<any> {\n    return this.disconnectedSource.asObservable().pipe(debounceTime(100));\n  }\n\n  /**\n   * Close the connection.\n   */\n  disconnect(): void {\n    this.baseCable.disconnect();\n  }\n\n  protected buildUrl(url: string, params?: any): string {\n    if (params instanceof Function) {\n      params = params();\n    }\n\n    if (!params) {\n      return url;\n    }\n\n    const paramString = Object.keys(params)\n      .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n      .join('&');\n\n    return [url, paramString].join('?');\n  }\n}\n\nexport class Channel {\n  baseChannel: any;\n  messages: Observable<any>;\n  private initializedSource: Subject<any> = new Subject();\n  private connectedSource: Subject<any> = new Subject();\n  private disconnectedSource: Subject<any> = new Subject();\n  private rejectedSource: Subject<any> = new Subject();\n  private eventTypes = ['initialized', 'connected', 'disconnected', 'rejected'];\n\n  constructor(public cable: Cable, public name: string, public params = {}) {\n    const channelParams = Object.assign({}, params, { channel: name });\n    this.messages = new Observable((observer) => {\n      const mixin = {\n        received: (data: any) => observer.next(data),\n      };\n\n      this.eventTypes.forEach((type) => {\n        mixin[type] = (data: any) => this[`${type}Source`].next(data);\n      });\n\n      this.baseChannel = this.cable.baseCable.subscriptions.create(channelParams, mixin);\n      return () => this.unsubscribe();\n    });\n  }\n\n  /**\n   * Emits messages that have been broadcast to the channel.\n   * For easy clean-up, when this Observable is completed the ActionCable channel will also be closed.\n   */\n  received(): Observable<any> {\n    return this.messages;\n  }\n\n  /**\n   * Emits when the subscription is initialized.\n   */\n  initialized(): Observable<any> {\n    return this.initializedSource.asObservable();\n  }\n\n  /**\n   * Emits when the subscription is ready for use on the server.\n   */\n  connected(): Observable<any> {\n    return this.connectedSource.asObservable();\n  }\n\n  /**\n   * Emits when the WebSocket connection is closed.\n   */\n  disconnected(): Observable<any> {\n    return this.disconnectedSource.asObservable();\n  }\n\n  /**\n   * Emits when the subscription is rejected by the server.\n   */\n  rejected(): Observable<any> {\n    return this.rejectedSource.asObservable();\n  }\n\n  /**\n   * Broadcast message to other clients subscribed to this channel.\n   */\n  send(data: any): void {\n    this.baseChannel.send(data);\n  }\n\n  /**\n   * Perform a channel action with the optional data passed as an attribute.\n   */\n  perform(action: string, data?: any): void {\n    this.baseChannel.perform(action, data);\n  }\n\n  /**\n   * Unsubscribe from the channel.\n   */\n  unsubscribe(): void {\n    this.baseChannel.unsubscribe();\n    this.eventTypes.forEach(type => this[`${type}Source`].complete());\n  }\n}\n","import { Injectable } from '@angular/core'\nimport { Cable } from './cable';\n\n@Injectable()\nexport class ActionCableService {\n  private cables: {[s: string]: Cable} = {};\n\n  /**\n   * Open a new ActionCable connection to the url. Any number of connections can be created.\n   */\n  cable(url: string, params?: any): Cable {\n    if (!this.cables.hasOwnProperty(url)) {\n      this.cables[url] = new Cable(url, params);\n    }\n\n    return this.cables[url];\n  }\n\n  /**\n   * Close an open connection for the url.\n   */\n  disconnect(url: string): void {\n    if (this.cables.hasOwnProperty(url)) {\n      this.cables[url].disconnect();\n      delete this.cables[url];\n    }\n  }\n}\n"],"names":["Subject","debounceTime","Observable","Injectable"],"mappings":"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"}